plugins {
    id 'java'
    id 'org.springframework.boot' version "${springBoot}"
    id 'io.spring.dependency-management' version "${springDependencyManagement}"
    id 'org.openapi.generator' version "${openApiGenerator}"
    id 'jacoco'
    id 'pmd'
}

group = 'code'
version = 'unspecified'

java {
    sourceCompatibility = '21'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
//    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    implementation 'org.flywaydb:flyway-core'
    runtimeOnly 'org.postgresql:postgresql'

    implementation "org.openapitools:jackson-databind-nullable:${jacksonDatabindNullable}"
    implementation "javax.annotation:javax.annotation-api:${javaxAnnotationApi}"
    implementation "io.swagger.core.v3:swagger-annotations:${swaggerAnnotations}"

    implementation "com.google.code.findbugs:jsr305:${jsr305}"

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation "org.mapstruct:mapstruct:${mapstruct}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstruct}"
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBinding}"

    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation "org.slf4j:slf4j-api:${wiremockSlf4j}"
    testImplementation "com.github.tomakehurst:wiremock-standalone:${wiremock}"
    testImplementation "io.rest-assured:rest-assured:${restAssured}"

    implementation "de.elnarion.util:plantuml-generator-util:2.3.0"
    pmd 'net.sourceforge.pmd:pmd-ant:7.0.0-rc4'
    pmd 'net.sourceforge.pmd:pmd-java:7.0.0-rc4'

}

bootJar {
    archiveFileName = "food_delivery.${archiveExtension.get()}"
}
jar {
    enabled = false
}

dependencyManagement {
    imports {
        mavenBom "org.testcontainers:testcontainers-bom:${testContainers}"
        mavenBom "org.springframework.security:spring-security-bom:${springSecurity}"
    }
}

// To turn on only consoleOutput, comment rest, priority doesn't seem to work, it passes no matter what

pmd {
    consoleOutput = false
    toolVersion = "7.0.0-rc4"
    rulesMinimumPriority = 5
    ruleSets = ["category/java/errorprone.xml", "category/java/bestpractices.xml"]
}

pmdMain {
    excludes = [
            "code/openApi/**",
            "code/PlantUmlCreator"
    ]
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    finalizedBy jacocoTestReport
}
jacoco {
    toolVersion = "0.8.9"
}
jacocoTestReport {
    dependsOn test
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "code/openApi/**",
                    "code/configuration/**",
                    "code/web/**",
                    "code/PlantUmlCreator.class"
            ])
        }))
    }
}

// https://docs.abstractapi.com/ip-geolocation
openApiGenerate {
    generatorName = "java"
    library = "webclient"
    configOptions = [
            serializableModel   : "true",
            dateLibrary         : "java8",
            serializationLibrary: "jackson"
    ]

    outputDir = "$buildDir/generated-sources/openapi".toString()
    inputSpec = "$rootDir/src/main/resources/openApi/abstractapi.com_geolocation_1.0.0_openapi.json".toString()
    apiPackage = "code.openApi.infrastructure"
    modelPackage = "code.openApi.model"
}

sourceSets {
    main {
        java.srcDirs += "$buildDir/generated-sources/openapi/src/main/java"
    }
}


compileJava.dependsOn tasks.openApiGenerate
compileJava.options.encoding = 'UTF-8'